#
# Autogenerated by Thrift Compiler (0.16.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require './calculadora_types'

module Calculadora
  class Client
    include ::Thrift::Client

    def ping()
      send_ping()
      recv_ping()
    end

    def send_ping()
      send_message('ping', Ping_args)
    end

    def recv_ping()
      result = receive_message(Ping_result)
      return
    end

    def suma(num1, num2)
      send_suma(num1, num2)
      return recv_suma()
    end

    def send_suma(num1, num2)
      send_message('suma', Suma_args, :num1 => num1, :num2 => num2)
    end

    def recv_suma()
      result = receive_message(Suma_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'suma failed: unknown result')
    end

    def resta(num1, num2)
      send_resta(num1, num2)
      return recv_resta()
    end

    def send_resta(num1, num2)
      send_message('resta', Resta_args, :num1 => num1, :num2 => num2)
    end

    def recv_resta()
      result = receive_message(Resta_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'resta failed: unknown result')
    end

    def multiplicacion(num1, num2)
      send_multiplicacion(num1, num2)
      return recv_multiplicacion()
    end

    def send_multiplicacion(num1, num2)
      send_message('multiplicacion', Multiplicacion_args, :num1 => num1, :num2 => num2)
    end

    def recv_multiplicacion()
      result = receive_message(Multiplicacion_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'multiplicacion failed: unknown result')
    end

    def division(num1, num2)
      send_division(num1, num2)
      return recv_division()
    end

    def send_division(num1, num2)
      send_message('division', Division_args, :num1 => num1, :num2 => num2)
    end

    def recv_division()
      result = receive_message(Division_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'division failed: unknown result')
    end

    def suma_vectores(vector1, vector2)
      send_suma_vectores(vector1, vector2)
      return recv_suma_vectores()
    end

    def send_suma_vectores(vector1, vector2)
      send_message('suma_vectores', Suma_vectores_args, :vector1 => vector1, :vector2 => vector2)
    end

    def recv_suma_vectores()
      result = receive_message(Suma_vectores_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'suma_vectores failed: unknown result')
    end

    def resta_vectores(vector1, vector2)
      send_resta_vectores(vector1, vector2)
      return recv_resta_vectores()
    end

    def send_resta_vectores(vector1, vector2)
      send_message('resta_vectores', Resta_vectores_args, :vector1 => vector1, :vector2 => vector2)
    end

    def recv_resta_vectores()
      result = receive_message(Resta_vectores_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'resta_vectores failed: unknown result')
    end

    def producto_escalar(vector1, vector2)
      send_producto_escalar(vector1, vector2)
      return recv_producto_escalar()
    end

    def send_producto_escalar(vector1, vector2)
      send_message('producto_escalar', Producto_escalar_args, :vector1 => vector1, :vector2 => vector2)
    end

    def recv_producto_escalar()
      result = receive_message(Producto_escalar_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'producto_escalar failed: unknown result')
    end

    def multi_vector_escalar(vector1, escalar)
      send_multi_vector_escalar(vector1, escalar)
      return recv_multi_vector_escalar()
    end

    def send_multi_vector_escalar(vector1, escalar)
      send_message('multi_vector_escalar', Multi_vector_escalar_args, :vector1 => vector1, :escalar => escalar)
    end

    def recv_multi_vector_escalar()
      result = receive_message(Multi_vector_escalar_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'multi_vector_escalar failed: unknown result')
    end

    def division_vector_escalar(vector1, escalar)
      send_division_vector_escalar(vector1, escalar)
      return recv_division_vector_escalar()
    end

    def send_division_vector_escalar(vector1, escalar)
      send_message('division_vector_escalar', Division_vector_escalar_args, :vector1 => vector1, :escalar => escalar)
    end

    def recv_division_vector_escalar()
      result = receive_message(Division_vector_escalar_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'division_vector_escalar failed: unknown result')
    end

    def suma_matrices(matriz1, matriz2)
      send_suma_matrices(matriz1, matriz2)
      return recv_suma_matrices()
    end

    def send_suma_matrices(matriz1, matriz2)
      send_message('suma_matrices', Suma_matrices_args, :matriz1 => matriz1, :matriz2 => matriz2)
    end

    def recv_suma_matrices()
      result = receive_message(Suma_matrices_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'suma_matrices failed: unknown result')
    end

    def resta_matrices(matriz1, matriz2)
      send_resta_matrices(matriz1, matriz2)
      return recv_resta_matrices()
    end

    def send_resta_matrices(matriz1, matriz2)
      send_message('resta_matrices', Resta_matrices_args, :matriz1 => matriz1, :matriz2 => matriz2)
    end

    def recv_resta_matrices()
      result = receive_message(Resta_matrices_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'resta_matrices failed: unknown result')
    end

    def producto_matrices(matriz1, matriz2)
      send_producto_matrices(matriz1, matriz2)
      return recv_producto_matrices()
    end

    def send_producto_matrices(matriz1, matriz2)
      send_message('producto_matrices', Producto_matrices_args, :matriz1 => matriz1, :matriz2 => matriz2)
    end

    def recv_producto_matrices()
      result = receive_message(Producto_matrices_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'producto_matrices failed: unknown result')
    end

    def multi_matriz_escalar(matriz1, escalar)
      send_multi_matriz_escalar(matriz1, escalar)
      return recv_multi_matriz_escalar()
    end

    def send_multi_matriz_escalar(matriz1, escalar)
      send_message('multi_matriz_escalar', Multi_matriz_escalar_args, :matriz1 => matriz1, :escalar => escalar)
    end

    def recv_multi_matriz_escalar()
      result = receive_message(Multi_matriz_escalar_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'multi_matriz_escalar failed: unknown result')
    end

    def division_matriz_escalar(matriz1, escalar)
      send_division_matriz_escalar(matriz1, escalar)
      return recv_division_matriz_escalar()
    end

    def send_division_matriz_escalar(matriz1, escalar)
      send_message('division_matriz_escalar', Division_matriz_escalar_args, :matriz1 => matriz1, :escalar => escalar)
    end

    def recv_division_matriz_escalar()
      result = receive_message(Division_matriz_escalar_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'division_matriz_escalar failed: unknown result')
    end

  end

  class Processor
    include ::Thrift::Processor

    def process_ping(seqid, iprot, oprot)
      args = read_args(iprot, Ping_args)
      result = Ping_result.new()
      @handler.ping()
      write_result(result, oprot, 'ping', seqid)
    end

    def process_suma(seqid, iprot, oprot)
      args = read_args(iprot, Suma_args)
      result = Suma_result.new()
      result.success = @handler.suma(args.num1, args.num2)
      write_result(result, oprot, 'suma', seqid)
    end

    def process_resta(seqid, iprot, oprot)
      args = read_args(iprot, Resta_args)
      result = Resta_result.new()
      result.success = @handler.resta(args.num1, args.num2)
      write_result(result, oprot, 'resta', seqid)
    end

    def process_multiplicacion(seqid, iprot, oprot)
      args = read_args(iprot, Multiplicacion_args)
      result = Multiplicacion_result.new()
      result.success = @handler.multiplicacion(args.num1, args.num2)
      write_result(result, oprot, 'multiplicacion', seqid)
    end

    def process_division(seqid, iprot, oprot)
      args = read_args(iprot, Division_args)
      result = Division_result.new()
      result.success = @handler.division(args.num1, args.num2)
      write_result(result, oprot, 'division', seqid)
    end

    def process_suma_vectores(seqid, iprot, oprot)
      args = read_args(iprot, Suma_vectores_args)
      result = Suma_vectores_result.new()
      result.success = @handler.suma_vectores(args.vector1, args.vector2)
      write_result(result, oprot, 'suma_vectores', seqid)
    end

    def process_resta_vectores(seqid, iprot, oprot)
      args = read_args(iprot, Resta_vectores_args)
      result = Resta_vectores_result.new()
      result.success = @handler.resta_vectores(args.vector1, args.vector2)
      write_result(result, oprot, 'resta_vectores', seqid)
    end

    def process_producto_escalar(seqid, iprot, oprot)
      args = read_args(iprot, Producto_escalar_args)
      result = Producto_escalar_result.new()
      result.success = @handler.producto_escalar(args.vector1, args.vector2)
      write_result(result, oprot, 'producto_escalar', seqid)
    end

    def process_multi_vector_escalar(seqid, iprot, oprot)
      args = read_args(iprot, Multi_vector_escalar_args)
      result = Multi_vector_escalar_result.new()
      result.success = @handler.multi_vector_escalar(args.vector1, args.escalar)
      write_result(result, oprot, 'multi_vector_escalar', seqid)
    end

    def process_division_vector_escalar(seqid, iprot, oprot)
      args = read_args(iprot, Division_vector_escalar_args)
      result = Division_vector_escalar_result.new()
      result.success = @handler.division_vector_escalar(args.vector1, args.escalar)
      write_result(result, oprot, 'division_vector_escalar', seqid)
    end

    def process_suma_matrices(seqid, iprot, oprot)
      args = read_args(iprot, Suma_matrices_args)
      result = Suma_matrices_result.new()
      result.success = @handler.suma_matrices(args.matriz1, args.matriz2)
      write_result(result, oprot, 'suma_matrices', seqid)
    end

    def process_resta_matrices(seqid, iprot, oprot)
      args = read_args(iprot, Resta_matrices_args)
      result = Resta_matrices_result.new()
      result.success = @handler.resta_matrices(args.matriz1, args.matriz2)
      write_result(result, oprot, 'resta_matrices', seqid)
    end

    def process_producto_matrices(seqid, iprot, oprot)
      args = read_args(iprot, Producto_matrices_args)
      result = Producto_matrices_result.new()
      result.success = @handler.producto_matrices(args.matriz1, args.matriz2)
      write_result(result, oprot, 'producto_matrices', seqid)
    end

    def process_multi_matriz_escalar(seqid, iprot, oprot)
      args = read_args(iprot, Multi_matriz_escalar_args)
      result = Multi_matriz_escalar_result.new()
      result.success = @handler.multi_matriz_escalar(args.matriz1, args.escalar)
      write_result(result, oprot, 'multi_matriz_escalar', seqid)
    end

    def process_division_matriz_escalar(seqid, iprot, oprot)
      args = read_args(iprot, Division_matriz_escalar_args)
      result = Division_matriz_escalar_result.new()
      result.success = @handler.division_matriz_escalar(args.matriz1, args.escalar)
      write_result(result, oprot, 'division_matriz_escalar', seqid)
    end

  end

  # HELPER FUNCTIONS AND STRUCTURES

  class Ping_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Ping_result
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Suma_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    NUM1 = 1
    NUM2 = 2

    FIELDS = {
      NUM1 => {:type => ::Thrift::Types::DOUBLE, :name => 'num1'},
      NUM2 => {:type => ::Thrift::Types::DOUBLE, :name => 'num2'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Suma_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::DOUBLE, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Resta_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    NUM1 = 1
    NUM2 = 2

    FIELDS = {
      NUM1 => {:type => ::Thrift::Types::DOUBLE, :name => 'num1'},
      NUM2 => {:type => ::Thrift::Types::DOUBLE, :name => 'num2'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Resta_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::DOUBLE, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Multiplicacion_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    NUM1 = 1
    NUM2 = 2

    FIELDS = {
      NUM1 => {:type => ::Thrift::Types::DOUBLE, :name => 'num1'},
      NUM2 => {:type => ::Thrift::Types::DOUBLE, :name => 'num2'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Multiplicacion_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::DOUBLE, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Division_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    NUM1 = 1
    NUM2 = 2

    FIELDS = {
      NUM1 => {:type => ::Thrift::Types::DOUBLE, :name => 'num1'},
      NUM2 => {:type => ::Thrift::Types::DOUBLE, :name => 'num2'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Division_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::DOUBLE, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Suma_vectores_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    VECTOR1 = 1
    VECTOR2 = 2

    FIELDS = {
      VECTOR1 => {:type => ::Thrift::Types::LIST, :name => 'vector1', :element => {:type => ::Thrift::Types::DOUBLE}},
      VECTOR2 => {:type => ::Thrift::Types::LIST, :name => 'vector2', :element => {:type => ::Thrift::Types::DOUBLE}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Suma_vectores_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::DOUBLE}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Resta_vectores_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    VECTOR1 = 1
    VECTOR2 = 2

    FIELDS = {
      VECTOR1 => {:type => ::Thrift::Types::LIST, :name => 'vector1', :element => {:type => ::Thrift::Types::DOUBLE}},
      VECTOR2 => {:type => ::Thrift::Types::LIST, :name => 'vector2', :element => {:type => ::Thrift::Types::DOUBLE}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Resta_vectores_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::DOUBLE}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Producto_escalar_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    VECTOR1 = 1
    VECTOR2 = 2

    FIELDS = {
      VECTOR1 => {:type => ::Thrift::Types::LIST, :name => 'vector1', :element => {:type => ::Thrift::Types::DOUBLE}},
      VECTOR2 => {:type => ::Thrift::Types::LIST, :name => 'vector2', :element => {:type => ::Thrift::Types::DOUBLE}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Producto_escalar_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::DOUBLE, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Multi_vector_escalar_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    VECTOR1 = 1
    ESCALAR = 2

    FIELDS = {
      VECTOR1 => {:type => ::Thrift::Types::LIST, :name => 'vector1', :element => {:type => ::Thrift::Types::DOUBLE}},
      ESCALAR => {:type => ::Thrift::Types::DOUBLE, :name => 'escalar'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Multi_vector_escalar_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::DOUBLE}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Division_vector_escalar_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    VECTOR1 = 1
    ESCALAR = 2

    FIELDS = {
      VECTOR1 => {:type => ::Thrift::Types::LIST, :name => 'vector1', :element => {:type => ::Thrift::Types::DOUBLE}},
      ESCALAR => {:type => ::Thrift::Types::DOUBLE, :name => 'escalar'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Division_vector_escalar_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::DOUBLE}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Suma_matrices_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    MATRIZ1 = 1
    MATRIZ2 = 2

    FIELDS = {
      MATRIZ1 => {:type => ::Thrift::Types::LIST, :name => 'matriz1', :element => {:type => ::Thrift::Types::LIST, :element => {:type => ::Thrift::Types::DOUBLE}}},
      MATRIZ2 => {:type => ::Thrift::Types::LIST, :name => 'matriz2', :element => {:type => ::Thrift::Types::LIST, :element => {:type => ::Thrift::Types::DOUBLE}}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Suma_matrices_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::LIST, :element => {:type => ::Thrift::Types::DOUBLE}}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Resta_matrices_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    MATRIZ1 = 1
    MATRIZ2 = 2

    FIELDS = {
      MATRIZ1 => {:type => ::Thrift::Types::LIST, :name => 'matriz1', :element => {:type => ::Thrift::Types::LIST, :element => {:type => ::Thrift::Types::DOUBLE}}},
      MATRIZ2 => {:type => ::Thrift::Types::LIST, :name => 'matriz2', :element => {:type => ::Thrift::Types::LIST, :element => {:type => ::Thrift::Types::DOUBLE}}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Resta_matrices_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::LIST, :element => {:type => ::Thrift::Types::DOUBLE}}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Producto_matrices_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    MATRIZ1 = 1
    MATRIZ2 = 2

    FIELDS = {
      MATRIZ1 => {:type => ::Thrift::Types::LIST, :name => 'matriz1', :element => {:type => ::Thrift::Types::LIST, :element => {:type => ::Thrift::Types::DOUBLE}}},
      MATRIZ2 => {:type => ::Thrift::Types::LIST, :name => 'matriz2', :element => {:type => ::Thrift::Types::LIST, :element => {:type => ::Thrift::Types::DOUBLE}}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Producto_matrices_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::LIST, :element => {:type => ::Thrift::Types::DOUBLE}}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Multi_matriz_escalar_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    MATRIZ1 = 1
    ESCALAR = 2

    FIELDS = {
      MATRIZ1 => {:type => ::Thrift::Types::LIST, :name => 'matriz1', :element => {:type => ::Thrift::Types::LIST, :element => {:type => ::Thrift::Types::DOUBLE}}},
      ESCALAR => {:type => ::Thrift::Types::DOUBLE, :name => 'escalar'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Multi_matriz_escalar_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::LIST, :element => {:type => ::Thrift::Types::DOUBLE}}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Division_matriz_escalar_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    MATRIZ1 = 1
    ESCALAR = 2

    FIELDS = {
      MATRIZ1 => {:type => ::Thrift::Types::LIST, :name => 'matriz1', :element => {:type => ::Thrift::Types::LIST, :element => {:type => ::Thrift::Types::DOUBLE}}},
      ESCALAR => {:type => ::Thrift::Types::DOUBLE, :name => 'escalar'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Division_matriz_escalar_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::LIST, :element => {:type => ::Thrift::Types::DOUBLE}}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

end

