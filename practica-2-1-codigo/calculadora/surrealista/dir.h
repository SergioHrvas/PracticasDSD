/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _DIR_H_RPCGEN
#define _DIR_H_RPCGEN

#include <rpc/rpc.h>


#ifdef __cplusplus
extern "C" {
#endif


struct operacion {
	float firstparam;
	float secondparam;
};
typedef struct operacion operacion;

struct vectores {
	struct {
		u_int v1_len;
		float *v1_val;
	} v1;
	struct {
		u_int v2_len;
		float *v2_val;
	} v2;
};
typedef struct vectores vectores;

struct tipo_simple {
	int errno;
	union {
		float resultado;
	} tipo_simple_u;
};
typedef struct tipo_simple tipo_simple;

struct tipo_vector {
	int errno;
	union {
		struct {
			u_int resultado_len;
			float *resultado_val;
		} resultado;
	} tipo_vector_u;
};
typedef struct tipo_vector tipo_vector;

#define DIRPROG 0x20000155
#define DIRVER 1

#if defined(__STDC__) || defined(__cplusplus)
#define SUMA 1
extern  tipo_simple * suma_1(operacion *, CLIENT *);
extern  tipo_simple * suma_1_svc(operacion *, struct svc_req *);
#define RESTA 2
extern  tipo_simple * resta_1(operacion *, CLIENT *);
extern  tipo_simple * resta_1_svc(operacion *, struct svc_req *);
#define MULTIPLICACION 3
extern  tipo_simple * multiplicacion_1(operacion *, CLIENT *);
extern  tipo_simple * multiplicacion_1_svc(operacion *, struct svc_req *);
#define DIVISION 4
extern  tipo_simple * division_1(operacion *, CLIENT *);
extern  tipo_simple * division_1_svc(operacion *, struct svc_req *);
#define SUMA_VECTORES 5
extern  tipo_vector * suma_vectores_1(vectores *, CLIENT *);
extern  tipo_vector * suma_vectores_1_svc(vectores *, struct svc_req *);
#define RESTA_VECTORES 6
extern  tipo_vector * resta_vectores_1(vectores *, CLIENT *);
extern  tipo_vector * resta_vectores_1_svc(vectores *, struct svc_req *);
#define MULTIPLICACION_VECTORES 7
extern  tipo_vector * multiplicacion_vectores_1(vectores *, CLIENT *);
extern  tipo_vector * multiplicacion_vectores_1_svc(vectores *, struct svc_req *);
#define DIVISION_VECTORES 8
extern  tipo_vector * division_vectores_1(vectores *, CLIENT *);
extern  tipo_vector * division_vectores_1_svc(vectores *, struct svc_req *);
extern int dirprog_1_freeresult (SVCXPRT *, xdrproc_t, caddr_t);

#else /* K&R C */
#define SUMA 1
extern  tipo_simple * suma_1();
extern  tipo_simple * suma_1_svc();
#define RESTA 2
extern  tipo_simple * resta_1();
extern  tipo_simple * resta_1_svc();
#define MULTIPLICACION 3
extern  tipo_simple * multiplicacion_1();
extern  tipo_simple * multiplicacion_1_svc();
#define DIVISION 4
extern  tipo_simple * division_1();
extern  tipo_simple * division_1_svc();
#define SUMA_VECTORES 5
extern  tipo_vector * suma_vectores_1();
extern  tipo_vector * suma_vectores_1_svc();
#define RESTA_VECTORES 6
extern  tipo_vector * resta_vectores_1();
extern  tipo_vector * resta_vectores_1_svc();
#define MULTIPLICACION_VECTORES 7
extern  tipo_vector * multiplicacion_vectores_1();
extern  tipo_vector * multiplicacion_vectores_1_svc();
#define DIVISION_VECTORES 8
extern  tipo_vector * division_vectores_1();
extern  tipo_vector * division_vectores_1_svc();
extern int dirprog_1_freeresult ();
#endif /* K&R C */

/* the xdr functions */

#if defined(__STDC__) || defined(__cplusplus)
extern  bool_t xdr_operacion (XDR *, operacion*);
extern  bool_t xdr_vectores (XDR *, vectores*);
extern  bool_t xdr_tipo_simple (XDR *, tipo_simple*);
extern  bool_t xdr_tipo_vector (XDR *, tipo_vector*);

#else /* K&R C */
extern bool_t xdr_operacion ();
extern bool_t xdr_vectores ();
extern bool_t xdr_tipo_simple ();
extern bool_t xdr_tipo_vector ();

#endif /* K&R C */

#ifdef __cplusplus
}
#endif

#endif /* !_DIR_H_RPCGEN */
